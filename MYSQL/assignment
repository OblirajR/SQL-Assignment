Assignment-1 --- Create two tables: EmployeeDetails and EmployeeSalary.

Columns for EmployeeDetails: EmpId FullName ManagerId DateOfJoining City &&
Columns for EmployeeSalary: : EmpId Project Salary Variable.


1. SQL Query to fetch records that are present in one table but not in another table.

    Select * from EmployeeDetails;
    select * from EmployeeSalary;


2. SQL query to fetch all the employees who are not working on any project.

    select * from EmployeeDetails RIGHT JOIN EmployeeSalary ON EmployeeDetails.EmpID = EmployeeSalary.EmpID where EmployeeSalary.Project IS NULL;


3. SQL query to fetch all the Employees from EmployeeDetails who joined in the Year 2020.

    select * from EmployeeDetails where YEAR(DateOfJoining) = 2020;


4. Fetch all employees from EmployeeDetails who have a salary record in EmployeeSalary.

    select * from EmployeeDetails RIGHT JOIN EmployeeSalary ON EmployeeDetails.EmpID = EmployeeSalary.EmpID where EmployeeSalary.Salary > 0;


5. Write an SQL query to fetch a project-wise count of employees.

    select Project, count(*) from EmployeeSalary Group by Project;


6. Fetch employee names and salaries even if the salary value is not present for the employee.

    select EmployeeDetails.FullName, EmployeeSalary.Salary from EmployeeDetails join EmployeeSalary on EmployeeDetails.EmpID = EmployeeSalary.EmpID;


7. Write an SQL query to fetch all the Employees who are also managers.

    select * from EmployeeDetails where ManagerId IS NOT NULL;


8. Write an SQL query to fetch duplicate records from EmployeeDetails.

    select * FROM EmployeeDetails GROUP BY EmpID, FullName, ManagerId, DateOfJoining, city HAVING COUNT(*) > 1;


9. Write an SQL query to fetch only odd rows from the table.

    select * from EmployeeDetails where EmpID%2=1;


10. Write a query to find the 3rd highest salary from a table without top or limit keyword.

    select * FROM EmployeeSalary order by Salary desc LIMIT 1 OFFSET 2;

